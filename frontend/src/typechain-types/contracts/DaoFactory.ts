/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type FractionStruct = {
  numerator: BigNumberish;
  denominator: BigNumberish;
};

export type FractionStructOutput = [numerator: bigint, denominator: bigint] & {
  numerator: bigint;
  denominator: bigint;
};

export declare namespace DaoFactory {
  export type DaoTokenSettingsStruct = {
    isDeployed: boolean;
    tokenAddress: AddressLike;
    name: string;
    symbol: string;
    recipients: AddressLike[];
    amounts: BigNumberish[];
  };

  export type DaoTokenSettingsStructOutput = [
    isDeployed: boolean,
    tokenAddress: string,
    name: string,
    symbol: string,
    recipients: string[],
    amounts: bigint[]
  ] & {
    isDeployed: boolean;
    tokenAddress: string;
    name: string;
    symbol: string;
    recipients: string[];
    amounts: bigint[];
  };

  export type DaoSettingsStruct = {
    daoType: BigNumberish;
    daoURI: string;
    members: AddressLike[];
    minimalDuration: BigNumberish;
    proposalCreationMinVotingPower: BigNumberish;
    daoToken: DaoFactory.DaoTokenSettingsStruct;
    quorumFraction: FractionStruct;
    minimumParticipationFraction: FractionStruct;
    salt: BytesLike;
  };

  export type DaoSettingsStructOutput = [
    daoType: bigint,
    daoURI: string,
    members: string[],
    minimalDuration: bigint,
    proposalCreationMinVotingPower: bigint,
    daoToken: DaoFactory.DaoTokenSettingsStructOutput,
    quorumFraction: FractionStructOutput,
    minimumParticipationFraction: FractionStructOutput,
    salt: string
  ] & {
    daoType: bigint;
    daoURI: string;
    members: string[];
    minimalDuration: bigint;
    proposalCreationMinVotingPower: bigint;
    daoToken: DaoFactory.DaoTokenSettingsStructOutput;
    quorumFraction: FractionStructOutput;
    minimumParticipationFraction: FractionStructOutput;
    salt: string;
  };
}

export interface DaoFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createDao"
      | "daoFractionalVoteImplementation"
      | "daoMultisigVoteImplementation"
      | "daoSimpleVoteImplementation"
      | "owner"
      | "renounceOwnership"
      | "setImplementations"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DaoCreated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createDao",
    values: [DaoFactory.DaoSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "daoFractionalVoteImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoMultisigVoteImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoSimpleVoteImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementations",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "createDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoFractionalVoteImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoMultisigVoteImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoSimpleVoteImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DaoCreatedEvent {
  export type InputTuple = [
    daoAddress: AddressLike,
    daoType: BigNumberish,
    owner: AddressLike,
    daoURI: string,
    daoToken: AddressLike,
    minimalDuration: BigNumberish,
    quorumFraction: FractionStruct,
    minimumParticipationFraction: FractionStruct
  ];
  export type OutputTuple = [
    daoAddress: string,
    daoType: bigint,
    owner: string,
    daoURI: string,
    daoToken: string,
    minimalDuration: bigint,
    quorumFraction: FractionStructOutput,
    minimumParticipationFraction: FractionStructOutput
  ];
  export interface OutputObject {
    daoAddress: string;
    daoType: bigint;
    owner: string;
    daoURI: string;
    daoToken: string;
    minimalDuration: bigint;
    quorumFraction: FractionStructOutput;
    minimumParticipationFraction: FractionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DaoFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DaoFactory;
  waitForDeployment(): Promise<this>;

  interface: DaoFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createDao: TypedContractMethod<
    [param: DaoFactory.DaoSettingsStruct],
    [void],
    "nonpayable"
  >;

  daoFractionalVoteImplementation: TypedContractMethod<[], [string], "view">;

  daoMultisigVoteImplementation: TypedContractMethod<[], [string], "view">;

  daoSimpleVoteImplementation: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setImplementations: TypedContractMethod<
    [
      daoSimpleVoteImplementation_: AddressLike,
      daoFractionalVoteImplementation_: AddressLike,
      daoMultisigVoteImplementation_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createDao"
  ): TypedContractMethod<
    [param: DaoFactory.DaoSettingsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoFractionalVoteImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daoMultisigVoteImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daoSimpleVoteImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setImplementations"
  ): TypedContractMethod<
    [
      daoSimpleVoteImplementation_: AddressLike,
      daoFractionalVoteImplementation_: AddressLike,
      daoMultisigVoteImplementation_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DaoCreated"
  ): TypedContractEvent<
    DaoCreatedEvent.InputTuple,
    DaoCreatedEvent.OutputTuple,
    DaoCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DaoCreated(address,uint8,address,string,address,uint256,tuple,tuple)": TypedContractEvent<
      DaoCreatedEvent.InputTuple,
      DaoCreatedEvent.OutputTuple,
      DaoCreatedEvent.OutputObject
    >;
    DaoCreated: TypedContractEvent<
      DaoCreatedEvent.InputTuple,
      DaoCreatedEvent.OutputTuple,
      DaoCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
