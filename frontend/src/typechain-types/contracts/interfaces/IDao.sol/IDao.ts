/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type FractionStruct = {
  numerator: BigNumberish;
  denominator: BigNumberish;
};

export type FractionStructOutput = [numerator: bigint, denominator: bigint] & {
  numerator: bigint;
  denominator: bigint;
};

export declare namespace IDao {
  export type ProposalActionStruct = {
    target: AddressLike;
    value: BigNumberish;
    calldatas: BytesLike;
  };

  export type ProposalActionStructOutput = [
    target: string,
    value: bigint,
    calldatas: string
  ] & { target: string; value: bigint; calldatas: string };
}

export interface IDaoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancel"
      | "castVote"
      | "execute"
      | "getVotes"
      | "hasVoted"
      | "minimumParticipation"
      | "propose"
      | "quorum"
      | "state"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DaoTransfer"
      | "Deposited"
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "SetDaoURI"
      | "SetMinimalDuration"
      | "SetMinimumParticipationFraction"
      | "SetQuorumFraction"
      | "VoteCast"
      | "VoteCastWithParams"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumParticipation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [IDao.ProposalActionStruct[], string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
}

export namespace DaoTransferEvent {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, recipient: string, amount: bigint];
  export interface OutputObject {
    token: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, token: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    actions: IDao.ProposalActionStruct[],
    voteStart: BigNumberish,
    voteEnd: BigNumberish,
    descriptionURI: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    actions: IDao.ProposalActionStructOutput[],
    voteStart: bigint,
    voteEnd: bigint,
    descriptionURI: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    actions: IDao.ProposalActionStructOutput[];
    voteStart: bigint;
    voteEnd: bigint;
    descriptionURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDaoURIEvent {
  export type InputTuple = [oldURI: string, newURI: string];
  export type OutputTuple = [oldURI: string, newURI: string];
  export interface OutputObject {
    oldURI: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinimalDurationEvent {
  export type InputTuple = [
    oldDuration: BigNumberish,
    newDuration: BigNumberish
  ];
  export type OutputTuple = [oldDuration: bigint, newDuration: bigint];
  export interface OutputObject {
    oldDuration: bigint;
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinimumParticipationFractionEvent {
  export type InputTuple = [
    oldFraction: FractionStruct,
    newFraction: FractionStruct
  ];
  export type OutputTuple = [
    oldFraction: FractionStructOutput,
    newFraction: FractionStructOutput
  ];
  export interface OutputObject {
    oldFraction: FractionStructOutput;
    newFraction: FractionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetQuorumFractionEvent {
  export type InputTuple = [
    oldFraction: FractionStruct,
    newFraction: FractionStruct
  ];
  export type OutputTuple = [
    oldFraction: FractionStructOutput,
    newFraction: FractionStructOutput
  ];
  export interface OutputObject {
    oldFraction: FractionStructOutput;
    newFraction: FractionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [voter: string, proposalId: bigint, weight: bigint];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastWithParamsEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    weight: BigNumberish,
    params: BytesLike
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    weight: bigint,
    params: string
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    weight: bigint;
    params: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDao extends BaseContract {
  connect(runner?: ContractRunner | null): IDao;
  waitForDeployment(): Promise<this>;

  interface: IDaoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancel: TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<[proposalId: BigNumberish], [void], "payable">;

  getVotes: TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  minimumParticipation: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  propose: TypedContractMethod<
    [
      actions: IDao.ProposalActionStruct[],
      descriptionURI: string,
      voteStart: BigNumberish,
      voteEnd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  quorum: TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "minimumParticipation"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      actions: IDao.ProposalActionStruct[],
      descriptionURI: string,
      voteStart: BigNumberish,
      voteEnd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quorum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  getEvent(
    key: "DaoTransfer"
  ): TypedContractEvent<
    DaoTransferEvent.InputTuple,
    DaoTransferEvent.OutputTuple,
    DaoTransferEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SetDaoURI"
  ): TypedContractEvent<
    SetDaoURIEvent.InputTuple,
    SetDaoURIEvent.OutputTuple,
    SetDaoURIEvent.OutputObject
  >;
  getEvent(
    key: "SetMinimalDuration"
  ): TypedContractEvent<
    SetMinimalDurationEvent.InputTuple,
    SetMinimalDurationEvent.OutputTuple,
    SetMinimalDurationEvent.OutputObject
  >;
  getEvent(
    key: "SetMinimumParticipationFraction"
  ): TypedContractEvent<
    SetMinimumParticipationFractionEvent.InputTuple,
    SetMinimumParticipationFractionEvent.OutputTuple,
    SetMinimumParticipationFractionEvent.OutputObject
  >;
  getEvent(
    key: "SetQuorumFraction"
  ): TypedContractEvent<
    SetQuorumFractionEvent.InputTuple,
    SetQuorumFractionEvent.OutputTuple,
    SetQuorumFractionEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteCastWithParams"
  ): TypedContractEvent<
    VoteCastWithParamsEvent.InputTuple,
    VoteCastWithParamsEvent.OutputTuple,
    VoteCastWithParamsEvent.OutputObject
  >;

  filters: {
    "DaoTransfer(address,address,uint256)": TypedContractEvent<
      DaoTransferEvent.InputTuple,
      DaoTransferEvent.OutputTuple,
      DaoTransferEvent.OutputObject
    >;
    DaoTransfer: TypedContractEvent<
      DaoTransferEvent.InputTuple,
      DaoTransferEvent.OutputTuple,
      DaoTransferEvent.OutputObject
    >;

    "Deposited(address,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "ProposalCanceled(uint256)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,tuple[],uint64,uint64,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "SetDaoURI(string,string)": TypedContractEvent<
      SetDaoURIEvent.InputTuple,
      SetDaoURIEvent.OutputTuple,
      SetDaoURIEvent.OutputObject
    >;
    SetDaoURI: TypedContractEvent<
      SetDaoURIEvent.InputTuple,
      SetDaoURIEvent.OutputTuple,
      SetDaoURIEvent.OutputObject
    >;

    "SetMinimalDuration(uint256,uint256)": TypedContractEvent<
      SetMinimalDurationEvent.InputTuple,
      SetMinimalDurationEvent.OutputTuple,
      SetMinimalDurationEvent.OutputObject
    >;
    SetMinimalDuration: TypedContractEvent<
      SetMinimalDurationEvent.InputTuple,
      SetMinimalDurationEvent.OutputTuple,
      SetMinimalDurationEvent.OutputObject
    >;

    "SetMinimumParticipationFraction(tuple,tuple)": TypedContractEvent<
      SetMinimumParticipationFractionEvent.InputTuple,
      SetMinimumParticipationFractionEvent.OutputTuple,
      SetMinimumParticipationFractionEvent.OutputObject
    >;
    SetMinimumParticipationFraction: TypedContractEvent<
      SetMinimumParticipationFractionEvent.InputTuple,
      SetMinimumParticipationFractionEvent.OutputTuple,
      SetMinimumParticipationFractionEvent.OutputObject
    >;

    "SetQuorumFraction(tuple,tuple)": TypedContractEvent<
      SetQuorumFractionEvent.InputTuple,
      SetQuorumFractionEvent.OutputTuple,
      SetQuorumFractionEvent.OutputObject
    >;
    SetQuorumFraction: TypedContractEvent<
      SetQuorumFractionEvent.InputTuple,
      SetQuorumFractionEvent.OutputTuple,
      SetQuorumFractionEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteCastWithParams(address,uint256,uint256,bytes)": TypedContractEvent<
      VoteCastWithParamsEvent.InputTuple,
      VoteCastWithParamsEvent.OutputTuple,
      VoteCastWithParamsEvent.OutputObject
    >;
    VoteCastWithParams: TypedContractEvent<
      VoteCastWithParamsEvent.InputTuple,
      VoteCastWithParamsEvent.OutputTuple,
      VoteCastWithParamsEvent.OutputObject
    >;
  };
}
